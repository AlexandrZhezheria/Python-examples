# Давай познайомимося зі старшим братом Фібоначчі, також відомим як Трібоначчі. Як видно з назви, він працює в основному як Фібоначчі,
# але підсумовуючи останні 3 (замість 2) чисел послідовності, щоб згенерувати наступне.
# Тобі потрібно створити функцію tribonacci, яка приймає список signature та number як аргументи й повертає перші
# number елементів - signature, включених у послідовність із заданим значенням.
# Примітки:
# signature завжди міститиме 3 цифри;
# number завжди буде позитивним числом;
# якщо number == 0, потрібно повернути порожній список і бути готовим до всього, що явно не вказано ;)
# Приклад:
# tribonacci([1, 1, 1], 10) # повертає [1, 1, 1, 3, 5, 9, 17, 31, 57, 105]
# Пояснення:
# Отже, якщо ми хочемо почати нашу послідовність Трибоначчі з [1, 1, 1] в якості аргументу signature, у нас буде послідовність: [1, 1, 1, 3, 5, 9, 17, 31, ...]
# Приклад:
# tribonacci([0, 0, 1], 10) # повертає [0, 0, 1, 1, 2, 4, 7, 13, 24, 44]
#
# Пояснення:
# Але що, якщо ми почнемо з [0, 0, 1] в якості signature? Починаючи з [0, 1] замість [1, 1] в основному зсуває звичайну послідовність Фібоначчі на одну позицію, у вас може виникнути спокуса подумати, що ми отримаємо ту ж послідовність, зрушену на 2 місця, але це не так, і ми отримаємо: [0, 0, 1, 1, 2, 4, 7, 13, 24, ...]

def tribonacci(signature: list, number: int) -> list:
    if number == 0:
        return []
    elif number <= 3:
        return signature[:number]
    else:
        sequence = signature.copy()
        for i in range(3, number):
            next_num = sum(sequence[-3:])
            sequence.append(next_num)
        return sequence
